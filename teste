import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.metrics import roc_curve, auc, RocCurveDisplay
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = df_atipicidade


X = df.drop('atipicidade_normalized', axis=1)  
y = df['atipicidade_normalized']  

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)


rf_clf = RandomForestClassifier(n_jobs=-1, max_depth=None, n_estimators=400)

rf_clf.fit(X_train, y_train)

y_pred = rf_clf.predict(X_test)



# Classification
print(classification_report(y_test, y_pred))

print("Accuracy Score:", accuracy_score(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()




# ROC curve
fpr, tpr, _ = roc_curve(y_test, rf_clf.predict_proba(X_test)[:, 1])
roc_auc = auc(fpr, tpr)

# ROC curve
plt.figure(figsize=(8, 6))
lw = 2
plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()




# Feature importance
importances = rf_clf.feature_importances_
indices = np.argsort(importances)[::-1]

# Feature importance
plt.figure(figsize=(12, 8))
plt.title("Feature importances")
plt.bar(range(X_train.shape[1]), importances[indices],
        color="r", align="center")
plt.xticks(range(X_train.shape[1]), X_train.columns[indices], rotation=90)
plt.xlim([-1, X_train.shape[1]])
plt.xlabel('Features')
plt.ylabel('Importance')
plt.show()

# Feature importance
col = []
for item in indices[0:9]:
    col.append(X_train.columns[item])
values = []
for item in np.argsort(importances)[::-1][0:9]:
    values.append('{:,.2%}'.format(importances[item]))
pd.DataFrame({'feature':col,'feature_importance':values}) 
