from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier


## X TRAIN X TEST

# Inicializar os modelos
models = {
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "SVM": SVC(),
    "k-NN": KNeighborsClassifier()
}

# Dicionário para armazenar os resultados
results = {}

# Loop para treinar e avaliar cada modelo
for name, model in models.items():
    # Treinamento do modelo
    model.fit(X_train, y_train)
    
    # Avaliação do modelo
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    
    # Armazenar os resultados
    results[name] = {"Accuracy": accuracy, "Report": report}

# Exibir os resultados
for name, metrics in results.items():
    print(f"Model: {name}")
    print(f"Accuracy: {metrics['Accuracy']:.2f}")
    print(metrics['Report'])






# Inicializar os modelos
models = {
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "SVM": SVC(),
    "k-NN": KNeighborsClassifier()
}

# Dicionário para armazenar os resultados
results = {}

# Loop para treinar e avaliar cada modelo
for name, model in models.items():
    # Treinamento do modelo
    model.fit(X_train, y_train)
    
    # Avaliação do modelo
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    
    # Armazenar os resultados
    results[name] = {"Accuracy": accuracy, "Report": report}

# Exibir os resultados
for name, metrics in results.items():
    print(f"Model: {name}")
    print(f"Accuracy: {metrics['Accuracy']:.2f}")
    print(metrics['Report'])
