from sklearn.preprocessing import MinMaxScaler, RobustScaler
import joblib  # or import pickle

# Assuming X_train is your training data

# MinMaxScaler
min_max_scaler = MinMaxScaler()
min_max_scaler.fit(X_train)
joblib.dump(min_max_scaler, 'min_max_scaler.save')  # or use pickle

# RobustScaler
robust_scaler = RobustScaler()
robust_scaler.fit(X_train)
joblib.dump(robust_scaler, 'robust_scaler.save')  # or use pickle






from sklearn.preprocessing import OneHotEncoder

# Assuming categorical_features is your categorical data

one_hot_encoder = OneHotEncoder(sparse=False)  # sparse=False is optional based on your preference
one_hot_encoder.fit(categorical_features)
joblib.dump(one_hot_encoder, 'one_hot_encoder.save')  # or use pickle





# Assuming 'category_column' is the column you want to frequency encode

frequency_encoding = X_train['category_column'].value_counts().to_dict()

# Save the frequency encoding dictionary
import json
with open('frequency_encoding.json', 'w') as f:
    json.dump(frequency_encoding, f)





# Load the saved encoders

# MinMaxScaler
min_max_scaler = joblib.load('min_max_scaler.save')  # or use pickle

# RobustScaler
robust_scaler = joblib.load('robust_scaler.save')  # or use pickle

# OneHotEncoder
one_hot_encoder = joblib.load('one_hot_encoder.save')  # or use pickle

# Frequency Encoding
with open('frequency_encoding.json', 'r') as f:
    frequency_encoding = json.load(f)

# Apply the loaded encoders to new data
# For MinMaxScaler and RobustScaler
scaled_data = min_max_scaler.transform(new_numerical_data)  # Replace with your new data
robust_scaled_data = robust_scaler.transform(new_numerical_data)

# For OneHotEncoder
one_hot_encoded_data = one_hot_encoder.transform(new_categorical_data)

# For Frequency Encoding
new_data['category_column'] = new_data['category_column'].map(frequency_encoding)
